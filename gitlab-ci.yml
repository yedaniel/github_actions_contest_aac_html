stages:
  - clear_s3_bucket
  - deploy_infrastructure
  - deploy_website
  - notify
  - remove_infrastructure  

clear_s3_bucket:
  stage: clear_s3_bucket
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  before_script:
    - 'which aws || pip3 install awscli'
  script:
    - echo "Checking if S3 bucket exists..."
    - >
      if aws s3api head-bucket --bucket "$PREVIOUS_S3_BUCKET_NAME" 2>/dev/null; then
        echo "Bucket exists, clearing S3 bucket..."
        aws s3 rm s3://$PREVIOUS_S3_BUCKET_NAME --recursive
      else
        echo "Bucket does not exist, skipping..."
      fi
  only:
    - main

deploy_infrastructure:
  before_script:
  # Install prerequisites such as Git, Python3, pip3, and awscli
  - 'which git || (apt-get update -y && apt-get install git -y)'
  - 'which python3 || (apt-get update -y && apt-get install python3 -y)'
  - 'which pip3 || (apt-get update -y && apt-get install python3-pip -y)'
  - pip3 install PyYAML
  - 'which aws || pip3 install awscli'
  stage: deploy_infrastructure
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - echo "Cloning CloudFormation template repository..."
    - git clone https://$DEPLOY_TOKEN_USERNAME:$DEPLOY_TOKEN@gitlab.com/YeDaniel/github_actions_contest_iac_s3b.git
    - echo "Deploying CloudFormation stack..."
    - |
      aws cloudformation deploy \
        --template-file github_actions_contest_iac_s3b/cloudformation.yaml \
        --stack-name MyStack \
        --parameter-overrides BucketName=$S3_BUCKET_NAME \
        --capabilities CAPABILITY_IAM \
        --no-fail-on-empty-changeset \
        --output json > deploy_output.json
    - aws cloudformation describe-stacks --stack-name MyStack --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" --output text > website_url.txt
  artifacts:
    paths:
      - website_url.txt
  only:
    - main

deploy_website:
  before_script:
    - 'which aws || pip3 install awscli'
  stage: deploy_website
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - echo "Deploying website to S3..."
    - aws s3 sync . s3://$S3_BUCKET_NAME --exclude "*" --include "index.html" --include "404.html"
  only:
    - main

notify:
  stage: notify
  dependencies:
    - deploy_infrastructure
  image: curlimages/curl:latest
  script:
    - WEBSITE_URL=$(cat website_url.txt)
    - >
      curl --request POST
      --url https://api.sendgrid.com/v3/mail/send
      --header "Authorization: Bearer $SENDGRID_API_KEY"
      --header 'Content-Type: application/json'
      --data '{"personalizations":[{"to":[{"email":"'"$EMAIL_TO"'"}]}],"from":{"email":"'"$EMAIL_FROM"'"},"subject":"Deployment Notification","content":[{"type":"text/plain","value":"The deployment of the infrastructure and website has been completed successfully. You can access the website here: '"$WEBSITE_URL"'"}]}'
  only:
    - main

remove_infrastructure:
  stage: remove_infrastructure
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  before_script:
    - 'which aws || pip3 install awscli'
  script:
    - echo "Checking if S3 bucket exists before removing infrastructure..."
    - >
      if aws s3api head-bucket --bucket "$S3_BUCKET_NAME" 2>/dev/null; then
        echo "Bucket exists, clearing S3 bucket before stack removal..."
        aws s3 rm s3://$S3_BUCKET_NAME --recursive
      else
        echo "Bucket does not exist or was already removed, proceeding with stack removal..."
      fi
    - echo "Removing CloudFormation stack..."
    - aws cloudformation delete-stack --stack-name MyStack
    - echo "Stack deletion initiated. Please monitor the AWS CloudFormation console for completion."
  when: manual
  only:
    - main
